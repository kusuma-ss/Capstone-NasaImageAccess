version : 2.1
orbs:
  slack: circleci/slack@4.10.1

jobs:
  build:
    docker:
      #- image: python:3.7.3-stretch
      - image: circleci/python:3.6.4

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.6

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate

            make install

      - run : 
          name : running lint operation
          command: | 
            . venv/bin/activate

            make lint 

  upload_docker :
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.6
      - run :
          name: build docker image 
          command: | 
            docker build --tag=capstone-project .
            docker image ls 
            docker run -p 5000:5000 capstone-project


      - run : 
          name: upload docker image 
          command : | 
            export DOCKER_IMAGE_NAME=capstone-project
            echo "Docker ID and Image: ${DOCKER_IMAGE_NAME}" 
            docker login -u=${DOCKERHUBUSER_NAME} P=${DOCKERPASSWORD}
            docker tag ${DOCKER_IMAGE_NAME} ${DOCKERHUBUSER_NAME}/${DOCKER_IMAGE_NAME}:${CIRCLE_WORKFLOW_ID}
            docker push ${DOCKERHUBUSER_NAME}/${DOCKER_IMAGE_NAME}:${CIRCLE_WORKFLOW_ID}
          

  create_infrastructure:
    docker:
        - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install gettext-base
        #- run:
       #   name : Ensure network infra exsists
        #  command : |
         #   aws cloudformation \
          #    create-stack --stack-name networkinfra-${CIRCLE_WORKFLOW_ID:0:7}\
           #   --template-body file://cloudformation/network.yml \
            #  --parameters file://cloudformation/networkparameter.json \
             # --region=us-east-1

      #- run : 
      #    name: wait for task to complete
       #   command: |
       #     aws cloudformation wait stack-create-complete \
        #    --stack-name "networkinfra-${CIRCLE_WORKFLOW_ID:0:7}"

      #- run: 
       #   sleep 600
        #  echo "Canceling workflow as too much time has elapsed"
          #no_output_timeout: 10m
          #export PARAMETERS_FILE="cloudformation/networkparameter.json"
          #export PARAMS=($(jq -r '.Parameters[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' ${PARAMETERS_FILE}))
          #aws cloudformation deploy \
          #--template-file cloudformation/network.yml  \
          #--stack-name "networkinfra-${CIRCLE_WORKFLOW_ID:0:7}" \
          #--parameters-override ${PARAMS[@]} \
          #--region=us-east-1
            

     # - run: 
      #    aws cloudformation \
       #       create-stack --stack-name clusternode-${CIRCLE_WORKFLOW_ID:0:7}\
        #      --template-body file://cloudformation/clusters.yml \
         #     --parameters file://cloudformation/clusterParameter.json \
          #    --region=us-east-1\
           #   --capabilities CAPABILITY_NAMED_IAM
     # - run : 
      #    name: wait for task to complete
       #   command: |
        #    aws cloudformation wait stack-create-complete \
         #   --stack-name "clusternode-${CIRCLE_WORKFLOW_ID:0:7}"
          #no_output_timeout: 20m
          #export PARAMETERS_FILE="cloudformation/clusterparameter.json"
          #export PARAMS=($(jq -r '.Parameters[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' ${PARAMETERS_FILE}))
          #aws cloudformation deploy\
          #--template-file cloudformation/cluster.yml \
          #--stack-name "clusternode-${CIRCLE_WORKFLOW_ID:0:7}"" \
          #--parameters-overrides ${PARAMS[@]} \
          #--region=us-east-1 \
          #--capabilities CAPABILITY_NAMED_IAM
          

   #   - run: 
    #      name: Ensure worker infra exists
     #     command : |
      #      aws cloudformation \
       #       create-stack --stack-name workernode-${CIRCLE_WORKFLOW_ID:0:7}\
        #      --template-body file://cloudformation/node.yml \
         #     --parameters file://cloudformation/nodeparameter.json \
          #    --region=us-east-1 \
           #   --capabilities CAPABILITY_NAMED_IAM
    #  - run : 
     #     name: wait for task to complete
      #    command: |
       #     aws cloudformation wait stack-create-complete \
        #    --stack-name "workernode-${CIRCLE_WORKFLOW_ID:0:7}"
         # no_output_timeout: 20m

          #export PARAMETERS_FILE="cloudformation/clusterparameter.json"
          #export PARAMS=($(jq -r '.Parameters[] | [.ParameterKey, .ParameterValue] | "\(.[0])=\(.[1])"' ${PARAMETERS_FILE}))
          #aws cloudformation deploy\
          #--template-file cloudformation/node.yml \
          #--stack-name " workernode-${CIRCLE_WORKFLOW_ID:0:7}"\
          #--parameters-overrides ${PARAMS[@]}\
          #--region=us-east-1 \
          #--capabilities CAPABILITY_NAMED_IAM

      #- run:
            #name: Install aws-iam-authenticator
            #command: |
              #curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
              #sudo chmod +x ./aws-iam-authenticator
              #sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      - run:
            name: Install kubectl
            command: |
              curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.8/2019-08-14/bin/linux/amd64/kubectl
              sudo chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin/kubectl

      - run:
            name: Connect to cluster
            command: |
              aws eks list-clusters > ~/cluster_name.txt
              EXPORT CLUSTER_NAME = $(cat ~/cluster_name)
              aws eks --region us-east-1 update-kubeconfig --name $CLUSTER_NAME

      - run:
          name: deploy on kuberbetes
          command: |
            kubectl apply -f deployment.yml
            kubectl get pod

      

  LOADbalancer:
    docker:
    - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Store old WorkflowID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/oldworkflowid.txt
            export WorkflowID=$(cat ~/oldworkflowid.txt)
            echo WorkflowID: "$WorkflowID"
      - persist_to_workspace:
          root: ~/
          paths:
            - oldworkflowid.txt
      - run:
          name: loadbalancer installation
          command: |
            aws cloudformation \
            create-stack --stack-name loadbalacer-${CIRCLECI_WORKFLOW_ID}\
            --template-file file://cloudformation/loadbalancer.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --region=us-east-1

      - run :
          name: deploy a loadbalancer Service
          command: | 
            kubectl apply -f service.yml
            kubectl get svc

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Clean up old environment
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(cat ~/oldworkflowid.txt)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "$CurrentWorkflowID" != "${OldWorkflowID}" ]]
            then
                echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
                aws cloudformation delete-stack --stack-name "networkinfra_${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "clusternode-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "workernode-${OldWorkflowID}"
            else
                echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi


workflows:
  defaults:
    jobs:
      #- build
      #- upload_docker
      - create_infrastructure
      - LOADbalancer:
          requires:
            - create_infrastructure
      - cleanup:
          requires:
            - LOADbalancer
