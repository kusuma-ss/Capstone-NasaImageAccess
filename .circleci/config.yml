version : 2.1
orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID : 
        type: string 
    steps:
      - run: 
          name: Destroy  environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "networkinfra-<< parameters.ID >>"
            aws cloudformation delete-stack --stack-name "clusternode-<< parameters.ID >>"
            aws cloudformation delete-stack --stack-name "workernode-<< parameters.ID >>"

jobs:
  build_and_upload_docker:
    docker:
      #- image: python:3.7.3-stretch
      - image: circleci/python:3.6.4

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.6
     
      - run:
          name: install dependencies
          command: |
            uname
            sudo apt update
            sudo apt install -y gettext
            envsubst -V
            python3 -m venv venv
            . venv/bin/activate
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && \
            sudo chmod +x /bin/hadolint

      - run : 
          name: obtaining NASA API key 
          command: | 
            echo $API_KEY
            echo "export NASA_API_KEY=$API_KEY"  >> ~/.bashrc
            source ~/.bashrc
            echo ${NASA_API_KEY}
      - run :
          name: create appilcation Dockerfile
          command: |
            touch oldDockerfile 
            cat Dockerfile >> oldDockerfile 
            cat oldDockerfile   
            rm Dockerfile
            envsubst '${NASA_API_KEY}' < oldDockerfile  >> Dockerfile
            cat Dockerfile

      - run : 
          name : running lint operation
          command: | 
            . venv/bin/activate
            make lint 

      - run :
          name: build docker image 
          command: | 
            docker build --tag=capstone-project-webapp:v1 .
            docker image ls
      - run : 
          name: upload docker image 
          command : | 
            export DOCKER_IMAGE_NAME=capstone-project-webapp:v1
            echo "Docker ID and Image: ${DOCKER_IMAGE_NAME}" 
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}
            docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}
          

  create_infrastructure:
    docker:
        - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install gettext-base

      - run:
          name : Ensure network infra exsists
          command : |
            aws cloudformation \
              create-stack --stack-name networkinfra-${CIRCLE_WORKFLOW_ID:0:7}\
              --template-body file://cloudformation/network.yml \
              --parameters file://cloudformation/networkparameter.json \
              --region=us-east-1

      - run : 
          name: wait for task to complete
          command: |
            aws cloudformation wait stack-create-complete \
            --stack-name "networkinfra-${CIRCLE_WORKFLOW_ID:0:7}"


      - run: 
          name : Ensure cluster infra exsists
          command : |
            aws cloudformation \
                create-stack --stack-name clusternode-${CIRCLE_WORKFLOW_ID:0:7}\
                --template-body file://cloudformation/clusters.yml \
                --parameters file://cloudformation/clusterParameter.json \
                --region=us-east-1\
                --capabilities CAPABILITY_NAMED_IAM

      - run : 
            name: wait for task to complete
            command: |
              aws cloudformation wait stack-create-complete \
              --stack-name "clusternode-${CIRCLE_WORKFLOW_ID:0:7}"
            no_output_timeout: 20m
            
          

      - run: 
          name: Ensure worker infra exists
          command : |
            aws cloudformation \
              create-stack --stack-name workernode-${CIRCLE_WORKFLOW_ID:0:7}\
              --template-body file://cloudformation/node.yml \
              --parameters file://cloudformation/nodeparameter.json \
              --region=us-east-1 \
              --capabilities CAPABILITY_NAMED_IAM

      - run : 
          name: wait for task to complete
          command: |
            aws cloudformation wait stack-create-complete \
            --stack-name "workernode-${CIRCLE_WORKFLOW_ID:0:7}"
          no_output_timeout: 20m

      - destroy-environment:  
          ID: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy_infra:
    docker:
        - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
            sudo apt-get install gettext-base

      - run:
          name: Install aws-iam-authenticator
          command: |  
            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64

            sudo chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

      - run:
            name: Install kubectl
            command: |
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              sudo chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin

      - run:
            name: Connect to cluster
            command: |
              aws eks list-clusters > ~/cluster_name.txt
              export CLUSTER_NAME=$(cat ~/cluster_name.txt)
              aws eks --region us-east-1 update-kubeconfig --name Udacitycapstoneproject-Cluster
      - run:
          name: deploy on kubernetes
          command: |
            kubectl apply -f eks/deployment.yaml
            kubectl get deployments
            for (( i=60; i>0; i--)); do
              sleep 1 &
              wait
            done
            kubectl get deployments
            kubectl get service
          # printf "  $i \r"
      - run :
          name: deploy service
          command: | 
            kubectl apply -f eks/service.yml
            for (( i=60; i>0; i--)); do
              sleep 1 &
              wait
            done
            kubectl get pod    
            kubectl get service 
          # printf "  $i \r"
         

workflows:
  defaults:
    jobs:
      - build_and_upload_docker
      
      #- create_infrastructure
      #- deploy_infra:
      #    requires:
      #      - create_infrastructure
      #      - upload_docker
     
